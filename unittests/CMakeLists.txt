cmake_minimum_required(VERSION 2.8)
project(curlCheck)

set(CURL_LIB_PATH "${PROJECT_SOURCE_DIR}/../3d-party/curl")
set(PUGIXML_LIB_PATH "${PROJECT_SOURCE_DIR}/../3d-party/pugixml")

include_directories(${CURL_LIB_PATH}/include)
include_directories(${PUGIXML_LIB_PATH}/src)

if (WIN32)
    link_directories("${CURL_LIB_PATH}/${CURL_PREFIX}/lib")
    link_directories("${CURL_LIB_PATH}/${CURL_PREFIX}/bin")
    link_directories("${SSL_LIB_PATH}/Lib")
elseif(APPLE)
    set(SSL_LIB_PATH $ENV{SSL_PATH})
    set(CURL_PREFIX "lib/.libs")
    link_directories("${SSL_LIB_PATH}/lib")
elseif(UNIX)
    set(CURL_PREFIX "lib/.libs")
    link_directories("${CURL_LIB_PATH}/${CURL_PREFIX}")
endif()

add_executable(${PROJECT_NAME}_checkUrl checkUrl.cpp)
add_executable(${PROJECT_NAME}_checkFtp checkFtp.cpp)
add_executable(${PROJECT_NAME}_http-post http-post.c)
add_executable(${PROJECT_NAME}_https-get https.c)
add_executable(${PROJECT_NAME}_checkVersionInfo checkVersionInfo.cpp)
add_executable(${PROJECT_NAME}_checkDownloadXml checkDownloadXml.cpp)
add_executable(${PROJECT_NAME}_checkXmlParser checkXmlParser.cpp)

set(CURL_LIB "curl")
set(SSL_LIB "ssl")
set(CRYPTO_LIB "crypto")
set(UPDATER_LIB "appUpdaterStatic")

if(WIN32)
    set(CURL_LIB "libcurl")
    set(SSL_LIB "libssl")
    set(CRYPTO_LIB "libcrypto")
endif()

if(WIN32)
    configure_file("${CURL_LIB_PATH}/${CURL_PREFIX}/bin/libcurl.dll" ${PROJECT_BINARY_DIR} COPYONLY)
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        # 64 bits
        configure_file("${SSL_LIB_PATH}/libcrypto-1_1-x64.dll" ${PROJECT_BINARY_DIR} COPYONLY)
        configure_file("${SSL_LIB_PATH}/libssl-1_1-x64.dll" ${PROJECT_BINARY_DIR} COPYONLY)
    elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
        # 32 bits
        configure_file("${SSL_LIB_PATH}/libcrypto-1_1.dll" ${PROJECT_BINARY_DIR} COPYONLY)
        configure_file("${SSL_LIB_PATH}/libssl-1_1.dll" ${PROJECT_BINARY_DIR} COPYONLY)
    endif()
elseif(APPLE)
    add_library("${CURL_LIB_PATH}/${CURL_PREFIX}/libcurl.4.dylib" SHARED IMPORTED)
elseif(UNIX)
    add_library("${CURL_LIB_PATH}/${CURL_PREFIX}/libcurl.so.4.6.0" SHARED IMPORTED)
endif()

configure_file("${PROJECT_SOURCE_DIR}/appUpdateSample.xml" ${PROJECT_BINARY_DIR} COPYONLY)

target_link_libraries(${PROJECT_NAME}_checkUrl ${CURL_LIB} ${SSL_LIB} ${CRYPTO_LIB})
target_link_libraries(${PROJECT_NAME}_checkFtp ${CURL_LIB} ${SSL_LIB} ${CRYPTO_LIB})
target_link_libraries(${PROJECT_NAME}_http-post ${CURL_LIB} ${SSL_LIB} ${CRYPTO_LIB})
target_link_libraries(${PROJECT_NAME}_https-get ${CURL_LIB} ${SSL_LIB} ${CRYPTO_LIB})
target_link_libraries(${PROJECT_NAME}_checkVersionInfo ${UPDATER_LIB})
target_link_libraries(${PROJECT_NAME}_checkDownloadXml ${UPDATER_LIB} ${CURL_LIB} ${SSL_LIB} ${CRYPTO_LIB})
target_link_libraries(${PROJECT_NAME}_checkXmlParser ${UPDATER_LIB})

add_test(checkUrl ${PROJECT_NAME}_checkUrl)
add_test(checkFtp ${PROJECT_NAME}_checkFtp)
add_test(http-post ${PROJECT_NAME}_http-post)
add_test(https-get ${PROJECT_NAME}_https-get)
add_test(checkVersionInfo ${PROJECT_NAME}_checkVersionInfo)
add_test(checkDownloadXml ${PROJECT_NAME}_checkDownloadXml)
add_test(checkXmlParser ${PROJECT_NAME}_checkXmlParser)
