stages:
    - test
    - build
    - deploy

.linux_build_job: &linux_build_job
    stage: build
    image: ubuntu:14.04
    before_script:
        - apt-get update
        - apt-get install -y git cmake build-essential autoconf libtool pkg-config libssl-dev
        - git submodule update --init --recursive
    script:
        - echo $CI_JOB_ID > linux_job_id

        # curl
        - cd 3d-party/curl
        - ./buildconf
        - ./configure
        - make
        - make install
        - cd ../..
    
        # appUpdater
        - mkdir build
        - cd build
        - cmake ../
        - cd ..
        - cmake --build build --config Release
        
        # ctest
        - cd build
        - ctest -j10 -C Release -T test --output-on-failure
        - cd ..

        # prepare artifacts
        - mkdir appupdater
        - mkdir appupdater/lib
        - mkdir appupdater/include
        - cp build/src/*appUpdaterShared.* ./appupdater/lib
        - cp build/src/*appUpdaterStatic.* ./appupdater/lib
        - cp ./src/updaterInterface.h ./appupdater/include
        - cp ./src/updater.h ./appupdater/include
        - cp ./src/versionInfo.h ./appupdater/include
        - cp ./src/curlBridge.h ./appupdater/include
        - cp ./src/xmlParser.h ./appupdater/include
        - cp ./src/platformSpecific.h ./appupdater/include
    tags:
        - linux

.win_common_build_job: &win_common_build_job
    stage: build
    before_script:
        - git submodule update --init --recursive
    script:
        - Set-Content -Path .\win_job_id -Value $env:CI_JOB_ID -NoNewline

        - cmd /c 'set'
        # curl
        - cmd /c 'vcvarsall.bat %ARCH% &
                cd 3d-party/curl &
                buildconf.bat &
                cd winbuild & 
                nmake /f Makefile.vc mode=dll WITH_SSL=dll SSL_PATH="%SSL_PATH%" &
                cd ../../..'
        # appUpdater
        - 'mkdir "$env:BUILD_DIR"'
        - 'cd "$env:BUILD_DIR"'
        - 'cmake ../ -G "$env:BUILD_TOOL"'
        - cd ..
        - 'cmake --build "$env:BUILD_DIR" --config Release'
        # ctest
        - 'cd "$env:BUILD_DIR"'
        - ctest -j10 -C Release -T test --output-on-failure
        - cd ..
        #prepare build artifacts
        - mkdir appupdater
        - 'mkdir appupdater/lib"_$env:ARCH"'
        - mkdir appupdater/include
        - 'cp ./"$env:BUILD_DIR"/src/Release/* ./appupdater/lib"_$env:ARCH"'
        - 'cp ./"$env:BUILD_DIR"/src/*.dll ./appupdater/lib"_$env:ARCH"'
        - cp ./src/updaterInterface.h ./appupdater/include
        - cp ./src/updater.h ./appupdater/include
        - cp ./src/versionInfo.h ./appupdater/include
        - cp ./src/curlBridge.h ./appupdater/include
        - cp ./src/xmlParser.h ./appupdater/include
        - cp ./src/platformSpecific.h ./appupdater/include
    tags:
    - win
    
.mac_build_job: &mac_build_job
    stage: build
    variables:
        SSL_PATH: '/usr/local/opt/openssl@1.1'
    before_script:
        - git submodule update --init --recursive

    script:
        - echo $CI_JOB_ID > mac_job_id

        # curl
        - cd 3d-party/curl
        - ./buildconf
        - ./configure --with-ssl=${SSL_PATH}
        - make
        - make install
        - cd ../..
        
        # appUpdater
        - mkdir build
        - cd build
        - cmake ../
        - cd ..
        - cmake --build build --config Release
        
        # ctest
        - cd build
        - ctest -j10 -C Release -T test --output-on-failure
        - cd ..

        #prepare build artifacts
        - mkdir appupdater
        - mkdir appupdater/lib
        - mkdir appupdater/include
        - cp build/src/*appUpdaterShared.* ./appupdater/lib
        - cp build/src/*appUpdaterStatic.* ./appupdater/lib
        - cp ./src/updaterInterface.h ./appupdater/include
        - cp ./src/updater.h ./appupdater/include
        - cp ./src/versionInfo.h ./appupdater/include
        - cp ./src/curlBridge.h ./appupdater/include
        - cp ./src/xmlParser.h ./appupdater/include
        - cp ./src/platformSpecific.h ./appupdater/include
    tags:
        - macos


linux_build:
    <<: *linux_build_job
    artifacts:
        name: appupdater_linux
        paths:
            - ./appupdater/*
            - ./3d-party/pugixml/src/*
            - ./linux_job_id
        expire_in: 3 day

win32_build_job: 
    variables:
        ARCH: 'x86'
        BUILD_DIR: 'build_x86'
        SSL_PATH: 'E:\Program Files (x86)\OpenSSL-Win32'
        BUILD_TOOL: 'Visual Studio 16 2019'
    <<: *win_common_build_job
    artifacts:
        name: appupdater_win32
        paths:
            - ./appupdater/*
            - ./3d-party/pugixml/src/*
        expire_in: 3 day

win64_build_job: 
    variables:
        ARCH: 'x64'
        BUILD_DIR: 'build_x64'
        SSL_PATH: 'E:\Program Files\OpenSSL-Win64'
        BUILD_TOOL: 'Visual Studio 16 2019 Win64'
    <<: *win_common_build_job
    artifacts:
        name: appupdater_win64
        paths:
            - ./appupdater/*
            - ./3d-party/pugixml/src/*
        expire_in: 3 day

macos_build:
    <<: *mac_build_job
    artifacts:
        name: appupdater_macos
        paths:
            - ./appupdater/*
            - ./3d-party/pugixml/src/*
        expire_in: 3 day

deploy:
    image: ubuntu:14.04
    variables:
        RELEASES_URL: "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases"
        RELEASES_ASSETS_URL: "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases/$CI_COMMIT_TAG/assets/links"
    stage: deploy
    only:
        - tags
    before_script:
        - apt-get update
        - apt-get install -y curl
    script:
        - export LINUX_JOB_ID=`cat linux_job_id`
        - export LINUX_ARTIFACT_URL="$CI_PROJECT_URL/-/jobs/$LINUX_JOB_ID/artifacts/download"

        - export WIN_JOB_ID=`cat win_job_id`
        - export WIN_ARTIFACT_URL="$CI_PROJECT_URL/-/jobs/$WIN_JOB_ID/artifacts/download"

        - export MAC_JOB_ID=`cat mac_job_id`
        - export MAC_ARTIFACT_URL="$CI_PROJECT_URL/-/jobs/$MAC_JOB_ID/artifacts/download"

        - 'echo "set token=%1" > win_deploy_command.bat'
        - 'echo "curl -X POST -H \"PRIVATE-TOKEN: %token%\" -d name=\"linux\" -d url=\"$LINUX_ARTIFACT_URL\" --url \"$RELEASES_ASSETS_URL\"" >> win_deploy_command.bat'
        - 'echo "curl -X POST -H \"PRIVATE-TOKEN: %token%\" -d name=\"windows\" -d url=\"$WIN_ARTIFACT_URL\" --url \"$RELEASES_ASSETS_URL\"" >> win_deploy_command.bat'
        - 'echo "curl -X POST -H \"PRIVATE-TOKEN: %token%\" -d name=\"mac\" -d url=\"$MAC_ARTIFACT_URL\" --url \"$RELEASES_ASSETS_URL\"" >> win_deploy_command.bat'
    artifacts:
        name: deploy_command
        paths:
            - ./win_deploy_command.bat
    tags:
        - linux